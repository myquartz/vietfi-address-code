name: Pipeline

on:
  push:
    branches:
      - 'main'
      - 'feature**'
      - 'bug**'
  delete:
    branches:
      - 'feature**'

env:
  PIPELINE_USER_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  PIPELINE_USER_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SAM_TEMPLATE: template.yaml
  TESTING_STACK_NAME: vietfi-address-test
  TESTING_PIPELINE_EXECUTION_ROLE: arn:aws:iam::722273251097:role/aws-sam-cli-managed-vietfi-ad-PipelineExecutionRole-waGBP6EtgRWp
  TESTING_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::722273251097:role/aws-sam-cli-managed-vietf-CloudFormationExecutionRo-l86fNHOtrbeR
  TESTING_ARTIFACTS_BUCKET: aws-sam-cli-managed-vietfi-address-artifactsbucket-nok96lbkkcks
  # If there are functions with "Image" PackageType in your template,
  # uncomment the line below and add "--image-repository ${TESTING_IMAGE_REPOSITORY}" to
  # testing "sam package" and "sam deploy" commands.
  # TESTING_IMAGE_REPOSITORY = '0123456789.dkr.ecr.region.amazonaws.com/repository-name'
  TESTING_REGION: ap-southeast-1
  TESTING_S3_BUCKET: vietfi-api-data
  # Production information
  PROD_STACK_NAME: vietfi-address-prod
  PROD_PIPELINE_EXECUTION_ROLE: arn:aws:iam::722273251097:role/aws-sam-cli-managed-vietfi-ad-PipelineExecutionRole-waGBP6EtgRWp
  PROD_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::722273251097:role/aws-sam-cli-managed-vietf-CloudFormationExecutionRo-l86fNHOtrbeR
  PROD_ARTIFACTS_BUCKET: aws-sam-cli-managed-vietfi-address-artifactsbucket-nok96lbkkcks
  # If there are functions with "Image" PackageType in your template,
  # uncomment the line below and add "--image-repository ${PROD_IMAGE_REPOSITORY}" to
  # prod "sam package" and "sam deploy" commands.
  # PROD_IMAGE_REPOSITORY = '0123456789.dkr.ecr.region.amazonaws.com/repository-name'
  PROD_REGION: ap-southeast-1
  PROD_S3_BUCKET: vietfi-api-data
  PROD_API_URL: https://api.vietfi.net/address/v1

jobs:
  test:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip' 
      - run: |
          # trigger the tests here
          sam validate --lint
          pip install -r tests/requirements.txt
          export PYTHONPATH="${PYTHONPATH}:$(pwd)/address_code_func:$(pwd)"
          python -m pytest tests/unit

  build-and-deploy-feature:
    # this stage is triggered only for feature branches (feature*),
    # which will build the stack and deploy to a stack named with branch name.
    # https://github.com/actions/setup-python
    # https://github.com/aws-actions/configure-aws-credentials#notice-node12-deprecation-warning
    if: startsWith(github.ref, 'refs/heads/feature')
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - run: sam build --template ${SAM_TEMPLATE} --use-container

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: feature-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to feature stack in the testing account
        shell: bash
        run: |
          FEATURE_STACK_NAME=$(echo ${GITHUB_REF##*/} | tr -cd '[a-zA-Z0-9-_]')
          sam deploy --stack-name $(echo ${GITHUB_REF##*/} | tr -cd '[a-zA-Z0-9-]') \
            --capabilities CAPABILITY_IAM \
            --region ${TESTING_REGION} \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}
            --parameter-overrides BucketName=${TESTING_S3_BUCKET} DataFileKey=${FEATURE_STACK_NAME}/address_db.sqlite3 CorsAllowOrigin=\'https://${TESTING_S3_BUCKET}.s3.${TESTING_REGION}.amazonaws.com\'
          aws s3 cp s3-bucket/address_db.sqlite3 s3://${TESTING_S3_BUCKET}/${FEATURE_STACK_NAME}/address_db.sqlite3
      - name: Generate HTML Demo Page
        shell: bash
        run: |
          FEATURE_STACK_NAME=$(echo ${GITHUB_REF##*/} | tr -cd '[a-zA-Z0-9-_]')
          API_HOST=$(aws cloudformation describe-stack-resources --stack-name ${FEATURE_STACK_NAME} \
            --query '(StackResources[?LogicalResourceId==`AddressCodeApi`].PhysicalResourceId)[0]')
          API_STAGE=$(aws cloudformation describe-stack-resources --stack-name ${FEATURE_STACK_NAME} \
            --query '(StackResources[?LogicalResourceId==`AddressCodeApiProdStage`].PhysicalResourceId)[0]')
          API_URL=https://${API_HOST//\"/}.execute-api.${TESTING_REGION}.amazonaws.com/${API_STAGE//\"/}          
          sed 's|{API_URL}|'$API_URL'|g' s3-bucket/index.html > feature.html
          aws s3 cp feature.html s3://${TESTING_S3_BUCKET}/${FEATURE_STACK_NAME}.html
          aws s3api put-object-acl --bucket ${TESTING_S3_BUCKET} --key ${FEATURE_STACK_NAME}.html --acl public-read

  build-and-deploy-bug:
    if: startsWith(github.ref, 'refs/heads/bug')
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - run: sam build --template ${SAM_TEMPLATE} --use-container

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to testing account
        shell: bash
        run: |
          sam deploy --stack-name ${TESTING_STACK_NAME} \
            --capabilities CAPABILITY_IAM \
            --region ${TESTING_REGION} \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}
            --parameter-overrides BucketName=${TESTING_S3_BUCKET} DataFileKey=${TESTING_STACK_NAME}/address_db.sqlite3 CorsAllowOrigin=\'https://${TESTING_S3_BUCKET}.s3.${TESTING_REGION}.amazonaws.com\'
          aws s3 cp s3-bucket/address_db.sqlite3 s3://${TESTING_S3_BUCKET}/${TESTING_STACK_NAME}/address_db.sqlite3
      - name: Generate HTML Demo Page
        shell: bash
        run: |
          BUG_STACK_NAME=$(echo ${GITHUB_REF##*/} | tr -cd '[a-zA-Z0-9-_]')
          API_HOST=$(aws cloudformation describe-stack-resources --stack-name ${TESTING_STACK_NAME} \
            --query '(StackResources[?LogicalResourceId==`AddressCodeApi`].PhysicalResourceId)[0]')
          API_STAGE=$(aws cloudformation describe-stack-resources --stack-name ${TESTING_STACK_NAME} \
            --query '(StackResources[?LogicalResourceId==`AddressCodeApiProdStage`].PhysicalResourceId)[0]')
          API_URL=https://${API_HOST//\"/}.execute-api.${TESTING_REGION}.amazonaws.com/${API_STAGE//\"/}
          sed 's|{API_URL}|'$API_URL'|g' s3-bucket/index.html > temp.html
          aws s3 cp temp.html s3://${TESTING_S3_BUCKET}/${BUG_STACK_NAME}.html
          aws s3api put-object-acl --bucket ${TESTING_S3_BUCKET} --key ${BUG_STACK_NAME}.html --acl public-read

  delete-feature:
    if: startsWith(github.event.ref, 'feature') && github.event_name == 'delete'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Delete feature branch stack
        env:
          FEATURE_BRANCH_NAME: ${{ github.event.ref }}
        run: |
          FEATURE_STACK_NAME=$(echo ${FEATURE_BRANCH_NAME##*/} | tr -cd '[a-zA-Z0-9-]')
          sam delete \
            --stack-name ${FEATURE_STACK_NAME} \
            --region ${TESTING_REGION} \
            --no-prompts
          aws s3 rm s3://${TESTING_S3_BUCKET}/${FEATURE_STACK_NAME}.html
          aws s3 cp s3://${TESTING_S3_BUCKET}/${FEATURE_STACK_NAME}/address_db.sqlite3

  build-and-package:
    if: github.ref == 'refs/heads/main'
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Build resources
        run: sam build --template ${SAM_TEMPLATE} --use-container

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to testing artifact buckets
        run: |
          sam package \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
            --region ${TESTING_REGION} \
            --output-template-file packaged-testing.yaml

      - uses: actions/upload-artifact@v4
        with:
          name: packaged-testing.yaml
          path: packaged-testing.yaml

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to production artifact buckets
        run: |
          sam package \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            --region ${PROD_REGION} \
            --output-template-file packaged-prod.yaml

      - uses: actions/upload-artifact@v4
        with:
          name: packaged-prod.yaml
          path: packaged-prod.yaml

  deploy-testing:
    if: github.ref == 'refs/heads/main'
    needs: [build-and-package]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: actions/download-artifact@v2
        with:
          name: packaged-testing.yaml

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to testing account
        run: |
          sam deploy --stack-name ${TESTING_STACK_NAME} \
            --template packaged-testing.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${TESTING_REGION} \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}
            --parameter-overrides BucketName=${TESTING_S3_BUCKET} DataFileKey=${TESTING_STACK_NAME}/address_db.sqlite3 CorsAllowOrigin=\'https://${TESTING_S3_BUCKET}.s3.${TESTING_REGION}.amazonaws.com\'
          aws s3 cp s3-bucket/address_db.sqlite3 s3://${TESTING_S3_BUCKET}/${TESTING_STACK_NAME}/address_db.sqlite3
          aws s3 cp temp.html s3://${TESTING_S3_BUCKET}/testing.html
      - name: Generate HTML Demo Page
        shell: bash
        run: |
          API_HOST=$(aws cloudformation describe-stack-resources --stack-name ${TESTING_STACK_NAME} \
            --query '(StackResources[?LogicalResourceId==`AddressCodeApi`].PhysicalResourceId)[0]')
          API_STAGE=$(aws cloudformation describe-stack-resources --stack-name ${TESTING_STACK_NAME} \
            --query '(StackResources[?LogicalResourceId==`AddressCodeApiProdStage`].PhysicalResourceId)[0]')
          API_URL=https://${API_HOST//\"/}.execute-api.${TESTING_REGION}.amazonaws.com/${API_STAGE//\"/}
          sed 's|{API_URL}|'$API_URL'|g' s3-bucket/index.html > temp.html
          aws s3 cp temp.html s3://${TESTING_S3_BUCKET}/testing.html
          aws s3api put-object-acl --bucket ${TESTING_S3_BUCKET} --key testing.html --acl public-read

  integration-test:
    if: github.ref == 'refs/heads/main'
    needs: [deploy-testing]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip' 
      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true
      - run: |
          # integration test
          pip install -r tests/requirements.txt
          env AWS_SAM_STACK_NAME=${TESTING_STACK_NAME} python -m pytest tests/integration

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: [deploy-testing]
    runs-on: ubuntu-latest
    # Configure GitHub Action Environment to have a manual approval step before deployment to production
    # https://docs.github.com/en/actions/reference/environments
    # environment: <configured-environment>
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: actions/download-artifact@v2
        with:
          name: packaged-prod.yaml

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to production account
        run: |
          sam deploy --stack-name ${PROD_STACK_NAME} \
            --template packaged-prod.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${PROD_REGION} \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${PROD_CLOUDFORMATION_EXECUTION_ROLE}
            --parameter-overrides BucketName=${PROD_S3_BUCKET} DataFileKey=${PROD_STACK_NAME}/address_db.sqlite3 CorsAllowOrigin=\'https://${PROD_S3_BUCKET}.s3.${PROD_REGION}.amazonaws.com\'
          aws s3 cp s3-bucket/address_db.sqlite3 s3://${PROD_S3_BUCKET}/${PROD_STACK_NAME}/address_db.sqlite3
      - name: Generate HTML Demo Page
        shell: bash
        run: |            
          sed 's|{API_URL}|'${PROD_API_URL}'|g' s3-bucket/index.html > prod.html
          aws s3 cp prod.html s3://${PROD_S3_BUCKET}/index.html
          aws s3api put-object-acl --bucket ${PROD_S3_BUCKET} --key index.html --acl public-read
